/**
 * MultiChestSearch - build.gradle
 */
apply plugin: 'java-library'
apply plugin: 'io.freefair.lombok'
apply plugin: 'de.kaonashi.gradle.nexusupload'
apply plugin: 'de.kaonashi.gradle.spigot'

buildscript {
    repositories {
        maven {
            name 'Kaonashi.DE Nexus'
            url 'https://nexus.phplibs.de/repository/kaonashi/'
            credentials {
                username 'TU_Reader'
                password 'TU_Reader'
            }
        }
        maven {
            name 'Gradle Plugins'
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'io.freefair.gradle:lombok-plugin:5.1.0'
        classpath 'de.kaonashi.gradle:NexusUpload:1.0.2'
        classpath 'de.kaonashi.gradle:Spigot:1.0.1-SNAPSHOT'
    }
}

repositories {
    mavenCentral()
    maven {
        name 'Kaonashi.DE Nexus'
        url 'https://nexus.phplibs.de/repository/kaonashi/'
        credentials {
            username 'TU_Reader'
            password 'TU_Reader'
        }
    }
    maven {
        name 'SpigotMC-Nexus Snapshots'
        url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name 'dmulloy2'
        url 'https://repo.dmulloy2.net/nexus/repository/public/'
    }
    maven {
        name 'sonatype'
        url 'https://oss.sonatype.org/content/groups/public/'
    }

}

ext.config = parseConfig(file('build.properties'))

dependencies {
    implementation 'org.spigotmc:spigot-api:' + config.spigotapi.version

    if (System.env.BUILD_NUMBER == null) {
        implementation project(':MinecraftCommons')
    } else {
        if (System.env.RELEASE_BUILD == 'false') {
            implementation 'de.kaonashi.minecraft:MinecraftCommons:' + config.commons.version + '-SNAPSHOT'
        } else {
            implementation 'de.kaonashi.minecraft:MinecraftCommons:' + config.commons.version
        }
    }

}

/*
 * common configuration and variable set up
 */
if (System.env.BUILD_NUMBER == null) {
    config.buildNumber = 'local'
} else {
    config.buildNumber = 'b' + System.env.BUILD_NUMBER
}

version = 'MC' + config.minecraft.version + '-' + config.project.version + '-' + config.buildNumber
group = 'de.vercility.minecraft.multichestsearch'
archivesBaseName = config.project.name
description = config.project.description

ext.projectManifest = manifest {
    attributes 'Project': config.project.name,
               'Project-Group': config.project.group,
               'Project-ID': config.project.id,
               'Project-Version': project.version,
               'Spigot-Version': config.spigotapi.version,
               'MC-Version': config.minecraft.version,
               'BuildDate': new Date().toString()
}

spigot {
    yaml {
        name = config.project.name
        description = config.project.description
        version = config.project.version + '-' + config.buildNumber
        apiVersion = 1.16
        main = group + '.' + config.project.name
        authors = ['Vercility / Kaonashi97']
        website = 'https://kaonashi.de/'
    }
}

/*
 * tasks and task configurations
 */
import org.apache.tools.ant.filters.ReplaceTokens
processResources {
    filter(ReplaceTokens, tokens: [
        projectID : config.project.id,
        projectGroup : config.project.group,
        projectName : config.project.name,
        projectVersion : config.project.version,
        projectDescription : config.project.description,
        spigotVersion : config.spigotapi.version,
        minecraftVersion : config.minecraft.version,
        buildDate : new Date().toString()
    ])
}

compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
    options.compilerArgs.addAll(['-Xlint:deprecation'])
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        from projectManifest
    }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}
/*
 * helpers
 */
private Properties parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}
