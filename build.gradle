/**
 * MultiChestSearch - build.gradle
 */
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'io.freefair.lombok'
apply plugin: 'de.kaonashi.gradle.nexusupload'
apply plugin: 'de.kaonashi.gradle.spigot'

buildscript {
    repositories {
        maven {
            name 'Kaonashi.DE Nexus'
            url 'https://nexus.phplibs.de/repository/kaonashi/'
            credentials {
                username 'TU_Reader'
                password 'TU_Reader'
            }
        }
        maven {
            name 'Gradle Plugins'
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'io.freefair.gradle:lombok-plugin:5.1.0'
        classpath 'de.kaonashi.gradle:NexusUpload:1.0.2'
        classpath 'de.kaonashi.gradle:Spigot:1.0.1-SNAPSHOT'
    }
}

repositories {
    mavenCentral()
    maven {
        name 'Kaonashi.DE Nexus'
        url 'https://nexus.phplibs.de/repository/kaonashi/'
        credentials {
            username 'TU_Reader'
            password 'TU_Reader'
        }
    }
    maven {
        name 'SpigotMC-Nexus Snapshots'
        url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name 'SpigotMC-Nexus Sonatype-Nexus-Snapshots'
        url 'https://hub.spigotmc.org/nexus/content/repositories/sonatype-nexus-snapshots/'
    }
    maven {
        name 'dmulloy2'
        url 'https://repo.dmulloy2.net/nexus/repository/public/'
    }
    maven {
        name 'sonatype'
        url 'https://oss.sonatype.org/content/groups/public/'
    }
    flatDir {
        name 'local TestServer'
        dirs '../TestServer'
    }
}

ext.config = parseConfig(file('build.properties'))

dependencies {
    implementation 'org.spigotmc:spigot-api:' + config.spigotapi.version
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.hamcrest:hamcrest:2.2'

    if (System.env.BUILD_NUMBER == null) {
        implementation project(':MinecraftCommons')
    } else {
        if (System.env.RELEASE_BUILD == 'false') {
            implementation 'de.kaonashi.minecraft:MinecraftCommons:' + config.commons.version + '-SNAPSHOT'
        } else {
            implementation 'de.kaonashi.minecraft:MinecraftCommons:' + config.commons.version
        }
    }

    // Spigot Server implementation dependency
    //implementation 'org.spigotmc.spigot-server:Spigot-1.16.3:2740d5a-890130b-0000'
}

/*
 * common configuration and variable set up
 */
if (System.env.BUILD_NUMBER == null) {
    config.buildNumber = 'local'
} else {
    config.buildNumber = 'b' + System.env.BUILD_NUMBER
}

version = 'MC' + config.minecraft.version + '-' + config.project.version + '-' + config.buildNumber
group = 'de.kaonashi.minecraft.multichestsearch'
archivesBaseName = config.project.name
description = config.project.description

ext.projectManifest = manifest {
    attributes 'Project': config.project.name,
               'Project-Group': config.project.group,
               'Project-ID': config.project.id,
               'Project-Version': project.version,
               'Spigot-Version': config.spigotapi.version,
               'MC-Version': config.minecraft.version,
               'BuildDate': new Date().toString()
}

spigot {
    yaml {
        name = config.project.name
        description = config.project.description
        version = config.project.version + '-' + config.buildNumber
        apiVersion = 1.16
        main = group + '.' + config.project.name
        authors = ['Kaonashi97']
        website = 'https://kaonashi.de/'
    }
}

eclipse {
    project {
        comment = config.project.description
    }
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }
}


/*
 * tasks and task configurations
 */
import org.apache.tools.ant.filters.ReplaceTokens
processResources {
    filter(ReplaceTokens, tokens: [
        projectID : config.project.id,
        projectGroup : config.project.group,
        projectName : config.project.name,
        projectVersion : config.project.version,
        projectDescription : config.project.description,
        spigotVersion : config.spigotapi.version,
        minecraftVersion : config.minecraft.version,
        buildDate : new Date().toString()
    ])
}

compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
    options.compilerArgs.addAll(['-Xlint:deprecation'])
    options.encoding = 'UTF-8'
}

compileTestJava {
    sourceCompatibility = targetCompatibility = '1.8'
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        from projectManifest
    }
}

javadoc {
    failOnError = false
    options.footer = 'Kaonashi.DE Minecraft Development'
    options.header = config.project.name + ' ' + config.project.version
    options.bottom = 'Copyright &copy; 2020 Kaonashi.DE. All rights reserved.'
    options.overview = project.projectDir.getAbsolutePath() + File.separator + 'overview.html'
    options.charSet = 'UTF-8'
    options.encoding = 'UTF-8'
    options.source = '1.8'
    options.links(
        'https://docs.oracle.com/javase/8/docs/api/'
    )
    options.author = true
    options.version = true
    options.use = true
}

task copyMissingJavadoc(type: Copy) {
    from file(projectDir.getAbsolutePath() + '/javadoc')
    into file(buildDir.getAbsolutePath() + '/docs/javadoc/resources/fonts')
}
copyMissingJavadoc.dependsOn javadoc
build.dependsOn copyMissingJavadoc

publishing {
    publications {
        kaonashi(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            groupId = nexusUpload.groupId
            artifactId = nexusUpload.artifactId
            version = nexusUpload.version

            pom {
                name = config.project.name
                description = config.project.description
                packaging = 'jar'
                url = 'https://kaonashi.de/'
                developers {
                    developer {
                        id = 'Kaonashi97'
                        name = 'Kaonashi97'
                        email = 'kaonashi97@kaonashi.de'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name 'KaonashiDE'
            url nexusUpload.nexusUrl
            credentials {
                username nexusUpload.nexusUsername
                password nexusUpload.nexusPassword
            }
        }
    }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

if (System.env.NO_DEPLOY != null && !Boolean.parseBoolean(System.env.NO_DEPLOY)) {
    build.dependsOn publishKaonashiPublicationToKaonashiDERepository
}


/*
 * helpers
 */
private Properties parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}
